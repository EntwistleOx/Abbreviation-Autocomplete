function countingSortInsert(e,t,s,i){if(!(e instanceof Array))throw new TypeError('1st param "arr" must be an array');if(!(t instanceof Array))throw new TypeError('1st param "arrReduced" must be an array');for(let e=i+1;e<t.length;e++){const s=t[e];s&&(s[0]++,s[1]++)}const n=t[i];if(n)n[1]++;else{for(var c=i-1;c>=0;c--){const e=t[c];if(e){const s=e[1]+1;t[i]=[s,s];break}}c<0&&(t[i]=[0,0])}e.splice(t[i][1],0,s)}Vue.component("abbreviation-autocomplete",{data:function(){return{focused:!1,searchText:"",loading:!1,recentlySelected:!1,searchList:[],selected:-1}},props:{data:{required:!0,type:Array},debounceWait:Number,limit:{default:1/0,type:Number},minSearchTextLength:{default:1,type:Number},placeholder:String,searchText:{default:"",type:String}},watch:{searchText:function(){this.onSearchTextChange()}},methods:{loadRelatedItems:function(){if(!(this.searchText.length>=this.minSearchTextLength))return[];{const e=[],t=[];this.data.forEach(s=>{const i=s.d.toLowerCase().indexOf(this.searchText.toLowerCase());i>=0&&(countingSortInsert(t,e,s,i),s.substrIndex=i)}),this.searchList=t.length<=this.limit?t:t.slice(0,this.limit),this.loading=!1}},onSearchTextChange:function(){this.recentlySelected?this.recentlySelected=!1:(this.focused=!0,this.selected=-1),this.searchText.length>=this.minSearchTextLength?(this.loading=!0,this.searchList=this.loadRelatedItems()):(this.loading=!1,this.searchList=[])},onUnfocus:function(){this.focused=!1},print:function(e){console.log(e)},select:function(){-1!==this.selected&&(this.focused=!1,this.searchText=this.searchList[this.selected].a,this.recentlySelected=!0)},selectDown:function(){this.selected=(this.selected+1)%this.searchList.length},selectUp:function(){-1===this.selected&&(this.selected=0);const e=this.searchList.length;this.selected=(this.selected+e-1)%e},setSelected(e){this.selected=e}},template:'\n<div class="abbreviation-autocomplete">\n  <input type="text" :placeholder="placeholder" v-model="searchText" @focus="focused = true" @blur="onUnfocus" @keyup.enter="select" @keydown.down="selectDown" @keydown.up="selectUp">\n  <ul v-show="focused" @mousedown="select">\n    <li v-show="loading">\n      <svg height="10" width="10">\n        <circle cx="5" cy="5" r="3"/>\n      </svg> \n      <svg height="10" width="10">\n        <circle cx="5" cy="5" r="3"/>\n      </svg> \n      <svg height="10" width="10">\n        <circle cx="5" cy="5" r="3"/>\n      </svg> \n    </li>\n    <li v-for="(element, index) in searchList" :class="{ selected: index === selected }" @mouseover="setSelected(index)">\n      <span>{{ element.a }}</span>\n      <span> ({{ element.d.substr(0, element.substrIndex) }}</span><span class="highlight">{{ searchText }}</span><span>{{ element.d.substr(element.substrIndex + searchText.length) }})</span>\n    </li>\n  </ul>\n</div>\n',created:function(){this.data.sort((e,t)=>e.d.localeCompare(t.d)),this.debounceWait&&(this.loadRelatedItems=_.debounce(this.loadRelatedItems,this.debounceWait));const e=this.$listeners;e&&(e["update:searchText"]&&(this.onSearchTextChange=()=>{this.recentlySelected?this.recentlySelected=!1:(this.focused=!0,this.selected=-1),this.searchText.length>=this.minSearchTextLength?(this.loading=!0,this.searchList=this.loadRelatedItems()):(this.loading=!1,this.searchList=[]),this.$emit("update:searchText",this.searchText)}),e.select&&(this.select=()=>{-1!==this.selected&&(this.focused=!1,delete this.searchList[this.selected].substrIndex,this.$emit("select",this.searchList[this.selected]),this.searchText=this.searchList[this.selected].a,this.recentlySelected=!0)}))}});
