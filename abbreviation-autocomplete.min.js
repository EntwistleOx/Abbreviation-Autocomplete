function countingSortInsert(e,t,s,i){if(!(e instanceof Array))throw new TypeError('1st param "arr" must be an array');if(!(t instanceof Array))throw new TypeError('1st param "arrReduced" must be an array');for(let e=i+1;e<t.length;e++){const s=t[e];s&&(s[0]++,s[1]++)}const r=t[i];if(r)r[1]++;else{for(var c=i-1;c>=0;c--){const e=t[c];if(e){const s=e[1]+1;t[i]=[s,s];break}}c<0&&(t[i]=[0,0])}e.splice(t[i][1],0,s)}Vue.component("abbreviation-autocomplete",{data:()=>({focused:!1,recentlySelected:!1,selected:-1}),props:{data:{required:!0,type:Array},limit:{default:1/0,type:Number},minSearchTextLength:{default:1,type:Number},placeholder:String,searchText:{default:"",type:String}},computed:{dataSorted(){let e=this.data.slice();return e.forEach((t,s)=>{e[s]={option:t}}),this.sortData(e),e},searchList(){if(this.searchText.length>=this.minSearchTextLength){const e=[],t=[];return this.dataSorted.forEach(s=>{const i=s.option.toLowerCase().indexOf(this.searchText.toLowerCase());if(i>=0){let r=s.option,c=this.searchText.length,h=i,a={leftText:r.substr(0,h),highlight:r.substr(h,c),rightText:r.substr(h+c),substrIndex:h};countingSortInsert(t,e,a,i)}}),t.length<=this.limit?t:t.slice(0,this.limit)}return[]}},watch:{searchText(){this.onSearchTextChange()}},methods:{onSearchTextChange(){this.recentlySelected?this.recentlySelected=!1:(this.focused=!0,this.selected=-1)},onUnfocus(){this.focused=!1},select(){-1!==this.selected&&(this.focused=!1,this.searchText=this.searchList[this.selected].option,this.recentlySelected=!0)},selectDown(){this.selected=(this.selected+1)%this.searchList.length},selectUp(){-1===this.selected&&(this.selected=0);const e=this.searchList.length;this.selected=(this.selected+e-1)%e},setSelected(e){this.selected=e},sortData(e){e.sort((e,t)=>e.option.localeCompare(t.option))}},template:'\n<div class="abbreviation-autocomplete">\n  <input type="text" :placeholder="placeholder" v-model="searchText" @focus="focused = true" @blur="onUnfocus" @keyup.enter="select" @keydown.down="selectDown" @keydown.up="selectUp">\n  <ul v-show="focused" @mousedown="select">\n    <li v-for="(element, index) in searchList" :class="{ selected: index === selected }" @mouseover="setSelected(index)">\n      <span> {{ element.leftText }}</span><span class="highlight">{{ element.highlight }}</span><span>{{ element.rightText }}</span>\n    </li>\n  </ul>\n</div>\n',created(){if(!(this.data instanceof Array))throw new TypeError("ERROR: The autocomplete data must be an array");this.data.forEach(e=>{if("string"!=typeof e)throw new TypeError("ERROR: The autocomplete data array can only contain strings")});let e=this.$listeners;e&&(e["update:searchText"]&&(this.onSearchTextChange=()=>{this.recentlySelected?this.recentlySelected=!1:(this.focused=!0,this.selected=-1),this.$emit("update:searchText",this.searchText)}),e&&e.select&&(this.select=()=>{-1!==this.selected&&(this.focused=!1,delete this.searchList[this.selected].substrIndex,this.$emit("select",this.searchList[this.selected]),this.searchText=this.searchList[this.selected].option,this.recentlySelected=!0)}))}});
